{"version":3,"sources":["plugins/log-manager.js"],"names":[],"mappings":"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","file":"log-manager.js","sourcesContent":["'use strict';\n\nimport {\n  version\n} from '../utils/package';\nimport Bunyan from 'bunyan';\nimport BunyanTCP from 'bunyan-logstash-tcp';\nimport Raven from 'raven';\n\nconst levels = ['trace', 'debug', 'info', 'warn', 'error'];\nconst levelTags = {\n  trace: 'trace',\n  debug: 'debug',\n  info: 'info',\n  warn: 'warn',\n  error: 'error'\n};\n\nconst register = (server, options, next) => {\n  options.logEvents = options.logEvents || ['onPostStart', 'onPostStop', 'response', 'request-error'];\n  options.serializers = options.serializers || {};\n  options.serializers.err = options.serializers.err || Bunyan.stdSerializers.err;\n  options.serializers.req = options.serializers.req || Bunyan.stdSerializers.req;\n  options.serializers.res = options.serializers.res || Bunyan.stdSerializers.res;\n  options.sentryActive = options.sentryActive || process.env.NODE_ENV === 'production';\n\n  if (options.sentryDSN && options.sentryActive) {\n    Raven.config(options.sentryDSN, {\n      autoBreadcrumbs: true,\n      logger: options.loggerName,\n      release: options.apiVersion,\n      environment: process.env.NODE_ENV\n    }).install();\n  }\n\n  if (process.env.NODE_ENV !== 'test') {\n    options.streams = options.streams || [{\n      level: 'info',\n      stream: process.stdout\n    }, {\n      level: 'debug',\n      type: 'raw',\n      stream: BunyanTCP.createStream({\n        host: options.burzum.host,\n        port: options.burzum.port,\n        appName: options.appName\n      })\n    }];\n  } else {\n    options.level = 'fatal';\n  }\n\n  let logger = Bunyan.createLogger({\n    name: options.loggerName,\n    app: options.loggerName,\n    env: process.env.NODE_ENV,\n    serializers: options.serializers,\n    level: options.level,\n    streams: options.streams,\n    bztoken: options.burzum.token,\n    type: 'json',\n    version: options.apiVersion\n  });\n\n  const tagToLevels = Object.assign({}, levelTags, options.tags);\n  const allTags = options.allTags || 'info';\n\n  const validTags = Object.keys(tagToLevels).filter((key) => levels.indexOf(tagToLevels[key]) < 0).length === 0;\n  if (!validTags || (allTags && levels.indexOf(allTags) < 0)) {\n    return next(new Error('invalid tag levels'));\n  }\n\n  const mergeHapiLogData = options.mergeHapiLogData;\n\n  // expose logger as 'server.logger()'\n  server.decorate('server', 'logger', () => logger);\n\n  // set a logger for each request\n  server.ext('onRequest', (request, reply) => {\n    request.logger = logger.child(logChild(request,options));\n    reply.continue();\n  });\n\n  server.on('log', function (event) {\n    logEvent(logger, event);\n  });\n\n  server.on('request', function (request, event) {\n    request.logger = request.logger || logger.child(logChild(request,options));\n    logEvent(request.logger, event);\n  });\n\n  // log when a request completes with an error\n  tryAddEvent(server, options, 'on', 'request-error', function (request, err) {\n    if (options.sentryDSN && options.sentryActive) {\n      Raven.captureException(err);\n    }\n\n    request.logger.warn(logPattern(request, err), 'request error');\n  });\n\n  // log when a request completes\n  tryAddEvent(server, options, 'on', 'response', function (request) {\n    request.logger.info(logPattern(request), 'request completed');\n  });\n\n  tryAddEvent(server, options, 'ext', 'onPostStart', function (s, cb) {\n    logger.info(server.info, 'server started');\n    cb();\n  });\n\n  tryAddEvent(server, options, 'ext', 'onPostStop', function (s, cb) {\n    logger.info(server.info, 'server stopped');\n    cb();\n  });\n\n  next();\n\n  function tryAddEvent (server, options, type, event, cb) {\n    if (options.logEvents && options.logEvents.indexOf(event) !== -1) {\n      server[type](event, cb);\n    }\n  }\n\n  function logEvent (current, event) {\n    let tags = event.tags;\n    let data = event.data;\n    let level;\n    let found = false;\n\n    let logObject;\n    if (mergeHapiLogData) {\n      if (typeof data === 'string') {\n        data = {\n          msg: data\n        };\n      }\n\n      logObject = Object.assign({\n        tags\n      }, data);\n    } else {\n      logObject = {\n        tags,\n        data\n      };\n    }\n\n    for (var i = 0; i < tags.length; i++) {\n      level = tagToLevels[tags[i]];\n      if (level) {\n        current[level](logObject);\n        found = true;\n        break;\n      }\n    }\n\n    if (!found && allTags) {\n      current[allTags](logObject);\n    }\n  }\n\n  function logChild(request, options){\n    return {\n      trace: {\n        id: request.headers['messageid'] || request.id\n      },\n      http: {\n        uri: request.url['pathname'],\n        path: request.url['path'],\n        url: `${request.headers['host']}${request.url['path']}`,\n        protocol: request.url['protocol'],\n        host: request.headers['host'],\n        user_agent: request.headers['user-agent'],\n        request_body: JSON.stringify(request.payload),\n        request_header: JSON.stringify(request.headers),\n        request_method: request['method']\n      },\n      peer: {\n        service: options.loggerName\n      }\n    };\n  }\n\n  function logPattern(request, err){\n    const info = request.info;\n    const http = request.logger.fields.http || {};\n    const peer = request.logger.fields.peer || {};\n    const response = request.response || {};\n    response._payload = response._payload || {};    \n    \n    http['latency_seconds'] = (info.responded - info.received) / 1000.0;\n    http['response_body'] = response._payload._data;\n    http['response_header'] = JSON.stringify(request.response.headers);\n    http['status_code'] = Number(request.raw.res.statusCode);\n    http['request_body'] = JSON.stringify(request.payload);\n    peer['hostname'] = request.logger.fields['hostname'];\n\n    return {\n      kind: 'request',\n      http: http,\n      peer: peer,\n      err: err\n    };\n  }\n};\n\nregister.attributes = {\n  name: 'log-manager',\n  version: version()\n};\n\nexport default register;\n"]}